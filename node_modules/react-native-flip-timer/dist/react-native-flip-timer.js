(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-native'), require('prop-types'), require('react-native/Libraries/Utilities/MatrixMath')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-native', 'prop-types', 'react-native/Libraries/Utilities/MatrixMath'], factory) :
  (global = global || self, factory(global['flip-timer'] = {}, global.React, global.reactNative, global.PropTypes, global.MatrixMath));
}(this, function (exports, React, reactNative, PropTypes, MatrixMath) { 'use strict';

  React = React && React.hasOwnProperty('default') ? React['default'] : React;
  PropTypes = PropTypes && PropTypes.hasOwnProperty('default') ? PropTypes['default'] : PropTypes;
  MatrixMath = MatrixMath && MatrixMath.hasOwnProperty('default') ? MatrixMath['default'] : MatrixMath;

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  var style = reactNative.StyleSheet.create({
    wrapper: {
      flexDirection: 'row'
    },
    numberWrapper: {
      backgroundColor: '#333333',
      margin: 3,
      shadowColor: '#1f1f1f',
      shadowOffset: {
        width: 0,
        height: 2
      },
      shadowRadius: 2,
      shadowOpacity: 1,
      elevation: 5
    },
    card: {
      flex: 0.5,
      alignItems: 'center',
      justifyContent: 'center',
      borderColor: '#1f1f1f',
      overflow: 'hidden'
    },
    overflowContainer: {
      overflow: 'hidden'
    },
    number: {
      fontWeight: '700',
      color: '#cccccc'
    },
    flipCard: {
      position: 'absolute',
      left: 0,
      height: '50%',
      width: '100%',
      backgroundColor: '#333333',
      borderColor: '#1f1f1f',
      backfaceVisibility: 'hidden',
      alignItems: 'center',
      justifyContent: 'center'
    },
    separator: {
      marginHorizontal: 5,
      marginVertical: 10,
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    circle: {
      height: 5,
      width: 5,
      borderRadius: 5,
      backgroundColor: '#333333'
    }
  });

  /* eslint-disable no-bitwise, radix, no-param-reassign */
  var createIdentityMatrix = MatrixMath.createIdentityMatrix;
  var multiplyInto = MatrixMath.multiplyInto;
  /**
   *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI
   *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos
   *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin
   *  https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotateX
   * */

  function rotateXMatrix(matrix, deg) {
    var rad = Math.PI / 180 * deg;
    var cos = Math.cos(rad);
    var sin = Math.sin(rad);
    var rotate = [1, 0, 0, 0, 0, cos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1];
    multiplyInto(matrix, matrix, rotate);
  }
  /**
   *  https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/perspective
   * */


  function perspectiveMatrix(matrix, value) {
    var perspective = createIdentityMatrix();
    MatrixMath.reusePerspectiveCommand(perspective, value);
    multiplyInto(matrix, matrix, perspective);
  }
  /**
   *  https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate
   * */


  function translateMatrix(matrix, origin) {
    var x = origin.x,
        y = origin.y,
        z = origin.z;
    var translate = createIdentityMatrix();
    MatrixMath.reuseTranslate3dCommand(translate, x, y, z);
    multiplyInto(matrix, translate, matrix);
  }

  function untranslateMatrix(matrix, origin) {
    var x = origin.x,
        y = origin.y,
        z = origin.z;
    var unTranslate = createIdentityMatrix();
    MatrixMath.reuseTranslate3dCommand(unTranslate, -x, -y, -z);
    multiplyInto(matrix, matrix, unTranslate);
  }

  function formatTime(hours, minutes, seconds) {
    if (hours < 10) {
      hours = "0" + hours;
    }

    if (minutes < 10) {
      minutes = "0" + minutes;
    }

    if (seconds < 10) {
      seconds = "0" + seconds;
    }

    return {
      hours: hours,
      minutes: minutes,
      seconds: seconds
    };
  }

  function formatNumberToTime(number) {
    var secNum = parseInt(number);
    var hours = Math.floor(secNum / 3600);
    var minutes = Math.floor((secNum - hours * 3600) / 60);
    var seconds = secNum - hours * 3600 - minutes * 60;
    return formatTime(hours, minutes, seconds);
  }

  function addTime(hours, minutes, seconds) {
    hours = parseInt(hours);
    minutes = parseInt(minutes);
    seconds = parseInt(seconds);
    seconds += 1;

    if (seconds >= 60) {
      var m = seconds / 60 << 0;
      minutes += m;
      seconds -= 60 * m;
    }

    if (minutes >= 60) {
      var h = minutes / 60 << 0;
      hours += h;
      minutes -= 60 * h;
    }

    return formatTime(hours, minutes, seconds);
  }

  var TransformUtil = {
    createIdentityMatrix: createIdentityMatrix,
    multiplyInto: multiplyInto,
    rotateXMatrix: rotateXMatrix,
    perspectiveMatrix: perspectiveMatrix,
    translateMatrix: translateMatrix,
    untranslateMatrix: untranslateMatrix,
    formatNumberToTime: formatNumberToTime,
    addTime: addTime
  };

  function FlipCard(_ref) {
    var setRef = _ref.setRef,
        type = _ref.type,
        size = _ref.size,
        number = _ref.number,
        flipCardStyle = _ref.flipCardStyle,
        numberStyle = _ref.numberStyle;
    return React.createElement(reactNative.Animated.View, {
      ref: setRef,
      style: [style.flipCard, type === 'front' ? {
        top: 0,
        borderTopLeftRadius: size / 10,
        borderTopRightRadius: size / 10,
        borderBottomWidth: 0.5
      } : {
        top: '50%',
        borderBottomLeftRadius: size / 10,
        borderBottomRightRadius: size / 10,
        borderTopWidth: 0.5
      }, flipCardStyle]
    }, React.createElement(reactNative.View, {
      style: style.overflowContainer
    }, React.createElement(reactNative.Text, {
      style: [style.number, {
        transform: [type === 'front' ? {
          translateY: size * 0.3
        } : {
          translateY: -size * 0.3
        }],
        fontSize: size / 1.5,
        lineHeight: size / 1.5
      }, numberStyle]
    }, number)));
  }

  FlipCard.defaultProps = {
    flipCardStyle: {},
    numberStyle: {}
  };
  FlipCard.propTypes = {
    setRef: PropTypes.func.isRequired,
    type: PropTypes.string.isRequired,
    size: PropTypes.number.isRequired,
    number: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    flipCardStyle: PropTypes.object,
    numberStyle: PropTypes.object
  };

  function Card(_ref) {
    var type = _ref.type,
        size = _ref.size,
        number = _ref.number,
        cardStyle = _ref.cardStyle,
        numberStyle = _ref.numberStyle;
    return React.createElement(reactNative.View, {
      style: [style.card, type === 'upper' ? {
        borderBottomWidth: 0.5
      } : {
        borderTopWidth: 0.5
      }, cardStyle]
    }, React.createElement(reactNative.Text, {
      style: [style.number, {
        transform: [type === 'upper' ? {
          translateY: size * 0.3
        } : {
          translateY: -size * 0.3
        }],
        fontSize: size / 1.5,
        lineHeight: size / 1.5
      }, numberStyle]
    }, number));
  }

  Card.defaultProps = {
    cardStyle: {},
    numberStyle: {}
  };
  Card.propTypes = {
    type: PropTypes.string.isRequired,
    size: PropTypes.number.isRequired,
    number: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    cardStyle: PropTypes.object,
    numberStyle: PropTypes.object
  };

  var _Dimensions$get = reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width;

  var NumberCard =
  /*#__PURE__*/
  function (_React$Component) {
    _inheritsLoose(NumberCard, _React$Component);

    function NumberCard(props) {
      var _this;

      _this = _React$Component.call(this, props) || this;

      _defineProperty(_assertThisInitialized(_this), "setFrontRef", function (ref) {
        _this.frontRef = ref;
      });

      _defineProperty(_assertThisInitialized(_this), "setBackRef", function (ref) {
        _this.backRef = ref;
      });

      _defineProperty(_assertThisInitialized(_this), "animateTick", function () {
        _this.rotateFront.setValue(0);

        _this.rotateBack.setValue(-180);

        reactNative.Animated.parallel([reactNative.Animated.timing(_this.rotateFront, {
          toValue: 180,
          duration: 800,
          useNativeDriver: true
        }), reactNative.Animated.timing(_this.rotateBack, {
          toValue: 0,
          duration: 800,
          useNativeDriver: true
        })]).start();
      });

      _defineProperty(_assertThisInitialized(_this), "transformRef", function (ref, deg, y) {
        var perspective = _this.props.perspective;
        var matrix = TransformUtil.createIdentityMatrix();
        TransformUtil.translateMatrix(matrix, {
          x: 0,
          y: y,
          z: 0
        });
        TransformUtil.perspectiveMatrix(matrix, perspective);
        TransformUtil.rotateXMatrix(matrix, deg);
        TransformUtil.untranslateMatrix(matrix, {
          x: 0,
          y: y,
          z: 0
        });

        if (ref) {
          ref.setNativeProps({
            style: {
              transform: [{
                matrix: matrix
              }]
            }
          });
        }
      });

      _this.rotateFront = new reactNative.Animated.Value(0);
      _this.rotateBack = new reactNative.Animated.Value(-180);
      _this.frontRef = null;
      _this.backRef = null;
      return _this;
    }

    var _proto = NumberCard.prototype;

    _proto.componentDidMount = function componentDidMount() {
      var _this2 = this;

      var size = this.props.size;
      this.animateTick();
      this.rotateFront.addListener(function (_ref) {
        var value = _ref.value;

        _this2.transformRef(_this2.frontRef, value, size * 0.3);
      });
      this.rotateBack.addListener(function (_ref2) {
        var value = _ref2.value;

        _this2.transformRef(_this2.backRef, value, -size * 0.3);
      });
    };

    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
      var number = this.props.number;

      if (nextProps.number !== number) {
        this.animateTick();
      }

      return true;
    };

    _proto.render = function render() {
      var _this$props = this.props,
          number = _this$props.number,
          previousNumber = _this$props.previousNumber,
          size = _this$props.size,
          numberWrapperStyle = _this$props.numberWrapperStyle,
          cardStyle = _this$props.cardStyle,
          flipCardStyle = _this$props.flipCardStyle,
          numberStyle = _this$props.numberStyle;
      return React.createElement(reactNative.View, {
        style: [style.numberWrapper, {
          width: size * 0.8,
          height: size * 1.2,
          borderRadius: size / 10
        }, numberWrapperStyle]
      }, React.createElement(Card, {
        type: "upper",
        size: size,
        number: number,
        cardStyle: cardStyle,
        numberStyle: numberStyle
      }), React.createElement(Card, {
        type: "lower",
        size: size,
        number: previousNumber,
        cardStyle: cardStyle,
        numberStyle: numberStyle
      }), React.createElement(FlipCard, {
        setRef: this.setFrontRef,
        type: "front",
        size: size,
        number: previousNumber,
        flipCardStyle: flipCardStyle,
        numberStyle: numberStyle
      }), React.createElement(FlipCard, {
        setRef: this.setBackRef,
        type: "back",
        size: size,
        number: number,
        flipCardStyle: flipCardStyle,
        numberStyle: numberStyle
      }));
    };

    return NumberCard;
  }(React.Component);

  NumberCard.defaultProps = {
    size: width / 6,
    perspective: 250
  };
  NumberCard.propTypes = {
    number: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    previousNumber: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    perspective: PropTypes.number,
    size: PropTypes.number,
    numberWrapperStyle: PropTypes.object,
    cardStyle: PropTypes.object,
    flipCardStyle: PropTypes.object,
    numberStyle: PropTypes.object
  };

  /* eslint-disable no-param-reassign, radix */

  function FlipNumber(_ref) {
    var number = _ref.number,
        unit = _ref.unit,
        size = _ref.size,
        perspective = _ref.perspective,
        numberWrapperStyle = _ref.numberWrapperStyle,
        cardStyle = _ref.cardStyle,
        flipCardStyle = _ref.flipCardStyle,
        numberStyle = _ref.numberStyle;
    number = parseInt(number);
    var previousNumber = number - 1;

    if (unit !== 'hours') {
      previousNumber = previousNumber === -1 ? 59 : previousNumber;
    } else {
      previousNumber = previousNumber === -1 ? 23 : previousNumber;
    }

    number = number < 10 ? "0" + number : number;
    previousNumber = previousNumber < 10 ? "0" + previousNumber : previousNumber;
    var numberSplit = number.toString().split('');
    var previousNumberSplit = previousNumber.toString().split('');
    return React.createElement(reactNative.View, {
      style: style.wrapper
    }, React.createElement(NumberCard, {
      number: numberSplit[0],
      previousNumber: previousNumberSplit[0],
      size: size,
      perspective: perspective,
      numberWrapperStyle: numberWrapperStyle,
      cardStyle: cardStyle,
      flipCardStyle: flipCardStyle,
      numberStyle: numberStyle
    }), React.createElement(NumberCard, {
      number: numberSplit[1],
      previousNumber: previousNumberSplit[1],
      size: size,
      perspective: perspective,
      numberWrapperStyle: numberWrapperStyle,
      cardStyle: cardStyle,
      flipCardStyle: flipCardStyle,
      numberStyle: numberStyle
    }));
  }

  FlipNumber.defaultProps = {
    unit: 'seconds'
  };
  FlipNumber.propTypes = {
    number: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    unit: PropTypes.oneOf(['hours', 'minutes', 'seconds']),
    size: PropTypes.number,
    perspective: PropTypes.number,
    numberWrapperStyle: PropTypes.object,
    cardStyle: PropTypes.object,
    flipCardStyle: PropTypes.object,
    numberStyle: PropTypes.object
  };

  function Separator() {
    return React.createElement(reactNative.View, {
      style: style.separator
    }, React.createElement(reactNative.View, {
      style: style.circle
    }), React.createElement(reactNative.View, {
      style: style.circle
    }));
  }

  var Timer =
  /*#__PURE__*/
  function (_React$Component) {
    _inheritsLoose(Timer, _React$Component);

    function Timer() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

      _defineProperty(_assertThisInitialized(_this), "state", {
        hours: 0,
        minutes: 0,
        seconds: 0
      });

      _defineProperty(_assertThisInitialized(_this), "updateTime", function () {
        var _this$state = _this.state,
            hours = _this$state.hours,
            minutes = _this$state.minutes,
            seconds = _this$state.seconds;
        var newState = TransformUtil.addTime(hours, minutes, seconds);

        _this.setState(function (prevState) {
          return _extends({}, prevState, newState);
        });
      });

      return _this;
    }

    var _proto = Timer.prototype;

    _proto.componentDidMount = function componentDidMount() {
      var _this2 = this;

      var _this$props = this.props,
          time = _this$props.time,
          play = _this$props.play;

      var _TransformUtils$forma = TransformUtil.formatNumberToTime(time),
          hours = _TransformUtils$forma.hours,
          minutes = _TransformUtils$forma.minutes,
          seconds = _TransformUtils$forma.seconds;

      this.setState({
        hours: hours,
        minutes: minutes,
        seconds: seconds
      }, function () {
        if (play) {
          _this2.timer = setInterval(function () {
            return _this2.updateTime();
          }, 1000);
        }
      });
    };

    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
      var _this3 = this;

      var play = this.props.play;

      if (nextProps.play !== play) {
        if (nextProps.play) {
          this.timer = setInterval(function () {
            return _this3.updateTime();
          }, 1000);
        } else {
          clearInterval(this.timer);
        }
      }

      return true;
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      clearInterval(this.timer);
    };

    _proto.render = function render() {
      var _this$props2 = this.props,
          wrapperStyle = _this$props2.wrapperStyle,
          flipNumberProps = _this$props2.flipNumberProps;
      var _this$state2 = this.state,
          hours = _this$state2.hours,
          minutes = _this$state2.minutes,
          seconds = _this$state2.seconds;
      return React.createElement(reactNative.View, {
        style: [style.wrapper, wrapperStyle]
      }, !!hours && React.createElement(FlipNumber, _extends({
        number: hours,
        unit: "hours"
      }, flipNumberProps)), React.createElement(Separator, null), !!minutes && React.createElement(FlipNumber, _extends({
        number: minutes,
        unit: "minutes"
      }, flipNumberProps)), React.createElement(Separator, null), !!seconds && React.createElement(FlipNumber, _extends({
        number: seconds,
        unit: "seconds"
      }, flipNumberProps)));
    };

    return Timer;
  }(React.Component);

  Timer.defaultProps = {
    play: true,
    wrapperStyle: {}
  };
  Timer.propTypes = {
    time: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    play: PropTypes.bool,
    wrapperStyle: PropTypes.object,
    flipNumberProps: PropTypes.shape({
      size: PropTypes.number,
      perspective: PropTypes.number,
      numberWrapperStyle: PropTypes.object,
      cardStyle: PropTypes.object,
      flipCardStyle: PropTypes.object,
      numberStyle: PropTypes.object
    })
  };

  exports.Timer = Timer;
  exports.FlipNumber = FlipNumber;
  exports.FlipCard = NumberCard;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=react-native-flip-timer.js.map
